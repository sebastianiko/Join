let selectedStatus = "todo"; // Default-Wert f√ºr den Add-Task-Button

/**
 * Creates and displays a task creation form in the board.
 *
 * This function sets the inner HTML of the 'addTaskFromBoard' element
 * to a task creation form generated by the `createTaskFromBoardDiv` function.
 */
function createTaskFromBoard(status = "todo") {
    const createTask = document.getElementById("addTaskFromBoard");
    createTask.innerHTML = createTaskFromBoardDiv();
    createTask.classList.add("board-mode");
    selectedContacts = [];
    selectedColors = [];
    subtasks = [];
    selectedStatus = status || "todo"; // Zuweisung der Spalte
    checkAddTaskChangesInBoard();
    let subtaskInputBoard = document.getElementById("board-new-subtask-input");
    subtaskInputBoard.addEventListener("input", showCloseOrDeleteIconDuringWritingSubtaskBoard);
    subtaskInputBoard.addEventListener("keydown", addSubtaskByEnterKeyBoard);
}

/**
 * Adds a new task from the board by validating inputs, collecting task data, and sending it to the server.
 *
 * This function:
 * - Validates all input fields using `validateAllInputsBoard`.
 * - Collects the task data, including selected contacts, priority, category, color, subtasks, title, description, date, and status.
 * - Sends the task data to the server using the `addTask` function.
 * - Clears the input fields on the board using `clearFieldsBoard`.
 *
 * @returns {void}
 */
function addTaskFromBoard() {
    if (!validateAllInputsBoard()) {
        return;
    }

    let task = {
        name: selectedContacts,
        priority: selectedPrio,
        category: selectedCategory,
        color: selectedColors,
        addedSubtasks: subtasks,
        title: document.getElementById("board-title-input").value,
        taskDescription: document.getElementById("board-textarea-input").value,
        date: document.getElementById("board-date-input").value,
        status: selectedStatus,
    };
    addTask("/tasks.json", task);
    clearFieldsBoard();
}

/**
 * Selects a priority button for the task board and applies the appropriate styling.
 *
 * This function resets the priority button styles, then highlights the selected priority
 * button by adding a background color class and removing the default text color class.
 * It also updates the `selectedPrio` variable to reflect the chosen priority.
 *
 * @param {string} prio - The priority to be selected. This is expected to be a string, such as "urgent", "medium", or "low".
 *
 * @returns {void}
 */
function choosePrioBoard(prio) {
    let selectedPioButton = document.getElementById(`board-prio-${prio}-button`);

    resetPrioBoard();

    selectedPioButton.classList.add(`prio-${prio}-button-bg-color`);
    selectedPioButton.classList.remove("prio-default-text-color");

    selectedPrio = prio;
}

/**
 * Resets the priority buttons on the task board to their default state.
 *
 * This function removes any background color classes from the priority buttons (urgent, medium, low)
 * and restores the default text color by adding the `prio-default-text-color` class to all buttons.
 * It ensures that no priority button is selected, effectively resetting the priority selection.
 *
 * @returns {void}
 */
function resetPrioBoard() {
    let urgentButton = document.getElementById("board-prio-urgent-button");
    let mediumButton = document.getElementById("board-prio-medium-button");
    let lowButton = document.getElementById("board-prio-low-button");

    urgentButton.classList.remove("prio-urgent-button-bg-color");
    mediumButton.classList.remove("prio-medium-button-bg-color");
    lowButton.classList.remove("prio-low-button-bg-color");

    urgentButton.classList.add("prio-default-text-color");
    mediumButton.classList.add("prio-default-text-color");
    lowButton.classList.add("prio-default-text-color");
}

/**
 * Check the visibility of the category dropdown.
 * If the dropdown is hidden, it opens the dropdown; otherwise, it closes it.
 */
function boardAddTaskCheckIfCategoryDropdownIsVisible() {
    if (document.getElementById("board-category-dropdown-list").classList.contains("d-none")) {
        boardAddTaskShowCategoryDropDown();
    } else {
        boardAddTaskCloseCategoryDropDown();
    }
}

/**
 * Displays the category dropdown and resets the selected category.
 * It also changes the dropdown arrow to indicate the open state.
 */
function boardAddTaskShowCategoryDropDown() {
    document.getElementById("board-category-placeholder").innerHTML = /*html*/ `Select task category`;
    document.getElementById(
        "board-category-dropdown-arrow-container"
    ).innerHTML = /*html*/ `<img src="../img/addTask/arrow_drop_up.png" id="board-dropdown-arrow"/>`;

    let dropdownList = document.getElementById("board-category-dropdown-list");
    dropdownList.innerHTML = boardAddTaskTemplateCategoryHTMLDropdownList(categoryList);

    document.getElementById("board-category-dropdown-list").classList.remove("d-none");
    selectedCategory = null;
}

/**
 * Closes the category dropdown.
 * If a category is selected, it displays the selected category in the placeholder;
 * otherwise, it resets the placeholder to the default "Select task category".
 */
function boardAddTaskCloseCategoryDropDown() {
    let categoryPlaceholder = document.getElementById("board-category-placeholder");

    if (selectedCategory) {
        categoryPlaceholder.innerHTML = selectedCategory;
        checkIfCategoryIsSelectedBoard();
    } else {
        categoryPlaceholder.innerHTML = /*html*/ `Select task category`;
        selectedCategory = null;
        checkIfCategoryIsSelectedBoard();
    }

    document.getElementById(
        "board-category-dropdown-arrow-container"
    ).innerHTML = /*html*/ `<div id="board-category-dropdown-arrow-container"><img src="../img/addTask/arrow_drop_down.svg" id="board-dropdown-arrow"></div>`;
    document.getElementById("board-category-dropdown-list").classList.add("d-none");
}

/**
 * Generates the HTML template for the category dropdown list.
 *
 * @param {Array} categories - The list of available categories to be displayed.
 * @returns {string} The generated HTML string for the category dropdown list.
 */
function boardAddTaskTemplateCategoryHTMLDropdownList(categories) {
    let dropdownHTML = "";
    for (let i = 0; i < categories.length; i++) {
        let category = categories[i];

        dropdownHTML += /*html*/ `
            <div class="dropdown-item" id="dropdown-list-category-${i}" onclick="boardAddTaskSelectCategory('${category}', ${i})">
                <span>${category}</span>
            </div>`;
    }
    return dropdownHTML;
}

/**
 * Prevents the dropdown from closing when clicking inside it.
 *
 * @param {Event} event - The click event.
 */
function boardAddTaskDoNotCloseDropdown(event) {
    event.stopPropagation();
}

/**
 * Selects a category from the dropdown.
 * Adds a border style to the category container and closes the dropdown.
 *
 * @param {string} categoryName - The name of the selected category.
 */
function boardAddTaskSelectCategory(categoryName) {
    selectedCategory = categoryName;
    boardAddTaskCloseCategoryDropDown();
}

/**
 * Sets up event listeners for the document after the DOM is fully loaded.
 *
 * This function is executed when the DOM content has been fully loaded and parsed,
 * ensuring that the event listeners are attached after the HTML structure is available.
 *
 * - Attaches an event listener to detect clicks outside of the category dropdown on the board.
 *
 * @listens document#DOMContentLoaded
 * @listens document#click
 */
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("click", clickOutsideOfCategoryDropdownBoard);
});

/**
 * Handles clicks outside the category dropdown on the board.
 *
 * This function checks if the user clicked outside the category dropdown. If so, it closes the dropdown
 * and resets the border of the selected category input.
 *
 * - If the category dropdown is visible, it calls functions to close it.
 * - If a category is selected, it resets the border of the category input to a default color.
 *
 * @param {Event} event - The click event triggered on the document.
 */
function clickOutsideOfCategoryDropdownBoard(event) {
    let categoryDropdownBoard = document.getElementById("board-category-dropdown-list");
    let clickedInsideCategory = categoryDropdownBoard && categoryDropdownBoard.contains(event.target);

    if (!clickedInsideCategory) {
        if (categoryDropdownBoard && !categoryDropdownBoard.classList.contains("d-none")) {
            boardAddTaskCloseCategoryDropDown();
        }

        if (categoryDropdownBoard && !categoryDropdownBoard.classList.contains("d-none")) {
            closeCategoryDropDown();
        }
        if (selectedCategory) {
            let categoryInput = document.getElementById("board-selected-category");
            categoryInput.style.border = "1px solid #d1d1d1";
        }
    }
}
