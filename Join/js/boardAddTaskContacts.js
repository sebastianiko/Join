/**
 * Displays the contacts dropdown list for the board and updates the UI elements
 * based on the currently selected contacts.
 *
 * This function performs the following actions:
 * - Fetches the list of contacts using `fetchContacts()`.
 * - Updates the placeholder text in the assigned contacts container based on the number of selected contacts.
 * - Changes the color of the assigned contacts container using `setColorOfAssignedContainerBoard()`.
 * - Updates the dropdown arrow icon.
 * - Populates the contacts dropdown list with HTML generated by `templateContactsHTMLDropdownListBoard()`.
 * - Reveals the contacts dropdown list by removing the `d-none` class.
 * - Hides the selected contacts circle container.
 * - Ensures that the correct checked contacts are displayed when the dropdown is closed by calling `showCheckedContactsAfterDropdownClosingBoard()`.
 *
 * @async
 */
async function showContactsDropDownBoard() {
    await fetchContacts();

    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");
    if (selectedContacts.length >= 0) {
        assignedPlaceholder.innerHTML = "An";
    }
    setColorOfAssignedContainerBoard();
    document.getElementById(
        "board-contacts-dropwdown-arrow-container"
    ).innerHTML = /*html*/ `<img src="../img/addTask/arrow_drop_up.png" id="dropdown-arrow"/>`;

    let dropdownList = document.getElementById("board-dropdown-list");
    dropdownList.innerHTML = templateContactsHTMLDropdownListBoard();

    dropdownList.classList.remove("d-none");
    document.getElementById("board-selected-contacts-circle-container").style.display = "none";

    showCheckedContactsAfterDropdownClosingBoard();
}

/**
 * Updates the state of checkboxes in the contacts dropdown list based on previously selected contacts.
 */
function showCheckedContactsAfterDropdownClosingBoard() {
    for (let i = 0; i < contactsWithColors.length; i++) {
        let contactName = contactsWithColors[i].contact;
        let checkBox = document.getElementById(`board-unchecked-box-${i}`);

        if (selectedContacts.includes(contactName)) {
            checkBox.src = "../img/checked.png";
        } else {
            checkBox.src = "../img/unchecked.png";
        }
    }
}

/**
 * Closes the contacts dropdown list and updates the UI elements, including showing selected contacts in circles.
 */
function closeContactsDropDownBoard() {
    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");
    assignedPlaceholder.innerHTML = /*html*/ `<span id="board-assigned-placeholder">Select contacts to assign</span>`;

    document.getElementById(
        "board-contacts-dropwdown-arrow-container"
    ).innerHTML = /*html*/ `<div id="board-contacts-dropwdown-arrow-container"><img src="../img/addTask/arrow_drop_down.svg" id="dropdown-arrow" /></div>`;
    document.getElementById("board-dropdown-list").classList.add("d-none");
    document.getElementById("board-selected-contacts-circle-container").style.display = "flex";

    removeColorOfBorderAssignedContainerBoard();
    showCirclesOfSelectedContactsBoard();
}

/**
 * Selects or deselects a contact based on the current checkbox state and updates the UI accordingly.
 *
 * @param {string} contactName - The name of the contact to be selected or deselected.
 * @param {number} index - The index of the contact in the contact list.
 */
function selectContactBoard(contactName, index) {
    if (selectedContacts.includes(contactName)) {
        handleContactDeselectionBoard(contactName, index);
    } else {
        handleContactSelectionBoard(contactName, index);
    }
}

/**
 * Handles the selection of a contact by updating the UI and the selectedContacts array.
 *
 * @param {string} contactName - The name of the contact to be selected.
 * @param {number} index - The index of the contact in the contact list.
 */
function handleContactSelectionBoard(contactName, index) {
    let selectedContactColor = contactsWithColors[index].color; // Hier wird die Farbe aus contactsWithColors genommen
    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");

    if (!selectedContacts.includes(contactName)) {
        selectedContacts.push(contactName);
        selectedColors.push(selectedContactColor);
        assignedPlaceholder.innerHTML = /*html*/ `<span id="board-assigned-placeholder">An</span>`;
        document.getElementById("board-assigned-container").classList.add("heightAuto");
        document.getElementById(`board-unchecked-box-${index}`).src = "../img/checked.png";
    }
}

/**
 * Handles the deselection of a contact by updating the UI and the selectedContacts array.
 *
 * @param {string} contactName - The name of the contact to be deselected.
 * @param {number} index - The index of the contact in the contact list.
 */
function handleContactDeselectionBoard(contactName, index) {
    let contactColor = contactsWithColors[index].color; // Hier wird die Farbe aus contactsWithColors genommen
    let indexOfSelectedContact = selectedContacts.indexOf(contactName);
    let indexOfSelectedColor = selectedColors.indexOf(contactColor);

    document.getElementById(`board-unchecked-box-${index}`).src = "../img/unchecked.png";

    if (indexOfSelectedContact >= 0) {
        selectedContacts.splice(indexOfSelectedContact, 1);
    }
    if (indexOfSelectedColor >= 0) {
        selectedColors.splice(indexOfSelectedColor, 1);
    }

    if (selectedContacts.length === 0) {
        document.getElementById("board-assigned-container").classList.remove("heightAuto");
    }
}

/**
 * Sets a colored border for the assigned contacts container when contacts are selected.
 */
function setColorOfAssignedContainerBoard() {
    let selectContactsContainer = document.getElementById("board-selected-name");
    selectContactsContainer.style.border = "1px solid #90D1ED"; // color changed by Andrej from "#90D1ED" to "blue"
}

/**
 * Removes the colored border from the assigned contacts container.
 */
function removeColorOfBorderAssignedContainerBoard() {
    let selectContactsContainer = document.getElementById("board-selected-name");
    selectContactsContainer.style.border = "";
}

/**
 * Displays circles representing selected contacts on the board.
 * Limits the number of visible circles to a maximum and appends
 * an indicator if more contacts are selected. Each contact circle
 * displays the initials of the contact with a unique background color.
 */
function showCirclesOfSelectedContactsBoard() {
    let circleContainer = document.getElementById("board-selected-contacts-circle-container");
    circleContainer.innerHTML = "";

    let maxCircles = 6;
    let remainingContacts = selectedContacts.length - maxCircles;

    renderContactCircles(circleContainer, maxCircles);
    renderRemainingContactsIndicator(circleContainer, remainingContacts);
}

/**
 * Renders the contact circles into the container.
 *
 * @param {HTMLElement} container - The container for the circles.
 * @param {number} maxCircles - The maximum number of circles to display.
 */
function renderContactCircles(container, maxCircles) {
    for (let i = 0; i < selectedContacts.length; i++) {
        if (i >= maxCircles) break;

        let contactHTML = generateContactCircleHTML(selectedContacts[i]);
        container.innerHTML += contactHTML;
    }
}

/**
 * Renders the "+X more" indicator if there are additional contacts.
 *
 * @param {HTMLElement} container - The container for the indicator.
 * @param {number} remainingContacts - The number of additional contacts not displayed.
 */
function renderRemainingContactsIndicator(container, remainingContacts) {
    if (remainingContacts > 0) {
        let remainingText = generateRemainingContactsHTML(remainingContacts);
        container.innerHTML += remainingText;
    }
}

/**
 * Generates the HTML string for a contact circle.
 *
 * @param {string} contact - The full name of the contact (e.g., "John Doe").
 * @returns {string} HTML string for a single contact circle.
 */
function generateContactCircleHTML(contact) {
    let choosenContact = contactList.indexOf(contact);
    let [firstName, lastName] = contact.split(" ");
    let firstLetter = firstName.charAt(0).toUpperCase();
    let lastLetter = lastName.charAt(0).toUpperCase();
    let color = colors[choosenContact];

    return /*html*/ `<div class="circle" style="background-color: ${color}">${firstLetter}${lastLetter}</div>`;
}

/**
 * Generates the HTML string for the "+X more" indicator.
 *
 * @param {number} remainingContacts - The number of additional contacts not displayed.
 * @returns {string} HTML string for the "+X more" indicator.
 */
function generateRemainingContactsHTML(remainingContacts) {
    return /*html*/ `<div class="moreCirlce">+${remainingContacts} weitere</div>`;
}

/**
 * Generates the HTML structure for the contacts dropdown list.
 * Contacts are sorted by their first name, and each contact is displayed with a colored circle and a checkbox.
 *
 * @returns {string} The generated HTML for the contacts dropdown list.
 */
function templateContactsHTMLDropdownListBoard() {
    let dropdownHTML = "";

    let contactsWithColors = combineContactsAndColors(contactList, colors);
    contactsWithColors = sortContactsWithColors(contactsWithColors);

    for (let i = 0; i < contactsWithColors.length; i++) {
        let { contact, color } = contactsWithColors[i];
        let [firstName, lastName] = contact.split(" ");
        let firstLetter = firstName.charAt(0).toUpperCase();
        let lastLetter = lastName.charAt(0).toUpperCase();

        dropdownHTML += /*html*/ `
            <div class="dropdown-item" id="board-dropdown-list-contact-${i}" 
                 onclick="selectContactBoard('${contact}', ${i}, '${color}'), doNotCloseDropdown(event)">
                <div>
                    <div class="circle" style="background-color: ${color};">
                        ${firstLetter}${lastLetter}
                    </div>
                    <span class="contactsDropdownNameSpan">${contact}</span>
                </div>
                <img src="../img/unchecked.png" alt="unchecked" id="board-unchecked-box-${i}" class="uncheckedBox">
            </div>`;
    }

    return dropdownHTML;
}

/**
 *
 * This function checks if the contacts dropdown is visibile or not
 *
 */
function checkIfContactsDropdownIsVisibleBoard() {
    let dropdownList = document.getElementById("board-dropdown-list");

    if (dropdownList.classList.contains("d-none")) {
        showContactsDropDownBoard();
    } else {
        closeContactsDropDownBoard();
    }
}

/**
 * Sets up event listener to handle clicks outside the contacts dropdown on the board.
 *
 * This function listens for the 'click' event on the document after the DOM content is loaded.
 * When a click is detected, it calls `clickOutsideOfContactsDropdownBoard` to handle the behavior
 * of the contacts dropdown when a user clicks outside of it.
 */
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("click", clickOutsideOfContactsDropdownBoard);
});

/**
 * Closes the contacts dropdown when a click occurs outside the dropdown or the contacts input.
 *
 * This function checks if the click event occurred inside the contacts dropdown or the contacts input.
 * If the click happened outside of both, it closes the contacts dropdown if it's currently visible.
 *
 * @param {Event} event - The click event triggered by the user.
 */
function clickOutsideOfContactsDropdownBoard(event) {
    const contactsDropdown = document.getElementById("board-dropdown-list");
    const contactsInput = document.getElementById("board-selected-name");

    const clickedInsideDropdown = contactsDropdown && contactsDropdown.contains(event.target);
    const clickedOnContactsInput = contactsInput && contactsInput.contains(event.target);

    if (!clickedInsideDropdown && !clickedOnContactsInput) {
        if (contactsDropdown && !contactsDropdown.classList.contains("d-none")) {
            closeContactsDropDownBoard();
        }
    }
}
